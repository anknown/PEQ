#! /bin/bash

set -e

### BEGIN INIT INFO
# Provides:          php-fpm
# Required-Start:    $remote_fs $network
# Required-Stop:     $remote_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: starts php-fpm
# Description:       starts the PHP FastCGI Process Manager daemon
### END INIT INFO


PEQ_ROOT=${PEQ_ROOT}

PHP_FPM_BIN=$PEQ_ROOT/php/sbin/php-fpm
PHP_FPM_CONF=$PEQ_ROOT/php/etc/php-fpm.conf
PHP_INI=$PEQ_ROOT/php/etc/php.ini
PHP_FPM_PID=$PEQ_ROOT/var/php/php-fpm.pid
PHP_FPM_LOG=$PEQ_ROOT/log/php
PHP_FPM_VAR=$PEQ_ROOT/var/php

#export PHP_INI_SCAN_DIR=$PEQ_ROOT/etc/ext
php_opts="--fpm-config $PHP_FPM_CONF --pid $PHP_FPM_PID"


wait_for_pid () {
	try=0

	while test $try -lt 35 ; do

		case "$1" in
			'created')
			if [ -f "$2" ] ; then
				try=''
				break
			fi
			;;

			'removed')
			if [ ! -f "$2" ] ; then
				try=''
				break
			fi
			;;
		esac

		echo -n .
		try=`expr $try + 1`
		sleep 1

	done

}

case "$1" in
	start)
                if [ ! -d "$PHP_FPM_LOG" ]; then
		    mkdir -p "$PHP_FPM_LOG"
		fi

                if [ ! -d "$PHP_FPM_VAR" ]; then
		    mkdir -p "$PHP_FPM_VAR"
		fi

		echo -n "Starting php-fpm "

		$PHP_FPM_BIN $php_opts

		if [ "$?" != 0 ] ; then
			echo " failed"
			exit 1
		fi

		wait_for_pid created $PHP_FPM_PID

		if [ -n "$try" ] ; then
			echo " failed"
			exit 1
		else
			echo " done"
		fi
	;;

	stop)
		echo -n "Gracefully shutting down php-fpm "

		if [ ! -r $PHP_FPM_PID ] ; then
			echo "warning, no pid file found - php-fpm is not running ?"
			exit 1
		fi

		kill -QUIT `cat $PHP_FPM_PID`

		wait_for_pid removed $PHP_FPM_PID

		if [ -n "$try" ] ; then
			echo " failed. Use force-quit"
			exit 1
		else
			echo " done"
		fi
	;;

	status)
		if [ ! -r $PHP_FPM_PID ] ; then
			echo "php-fpm is stopped"
			exit 0
		fi

		PID=`cat $PHP_FPM_PID`
		if ps -p $PID | grep -q $PID; then
			echo "php-fpm (pid $PID) is running..."
		else
			echo "php-fpm dead but pid file exists"
		fi
	;;

	force-quit)
		echo -n "Terminating php-fpm "

		if [ ! -r $PHP_FPM_PID ] ; then
			echo "warning, no pid file found - php-fpm is not running ?"
			exit 1
		fi

		kill -TERM `cat $PHP_FPM_PID`

		wait_for_pid removed $PHP_FPM_PID

		if [ -n "$try" ] ; then
			echo " failed"
			exit 1
		else
			echo " done"
		fi
	;;

	restart)
		$0 stop
		$0 start
	;;

	reload)

		echo -n "Reload service php-fpm "

		if [ ! -r $PHP_FPM_PID ] ; then
			echo "warning, no pid file found - php-fpm is not running ?"
			exit 1
		fi

		kill -USR2 `cat $PHP_FPM_PID`

		echo " done"
	;;

	*)
		echo "Usage: $0 {start|stop|force-quit|restart|reload|status}"
		exit 1
	;;

esac
